// Code generated by wsgen. DO NOT EDIT.
package model
import (
	"errors"
	"net/url"
)

type msgIdx uint8
const (
    MsgIdxUndefined = iota
    MsgIdxTextMessage
    MsgIdxChatEvent
)

type WSMessageMeta struct {
    MsgIdx msgIdx `json:"$msg_idx"`
}


type TextMessage struct {
    WSMessageMeta
    ID int64 `json:"id"`
    Content string `json:"content"`
}
func NewTextMessage(
    id int64,
    content string,
) *TextMessage {
    var model TextMessage
    model.WSMessageMeta.MsgIdx = MsgIdxTextMessage
    model.ID = id
    model.Content = content
    return &model
}

type ChatEvent struct {
    WSMessageMeta
    ID int64 `json:"id"`
    Event string `json:"event"`
    TestSnakeCaseConvertor float64 `json:"test_snake_case_convertor"`
}
func NewChatEvent(
    id int64,
    event string,
    testSnakeCaseConvertor float64,
) *ChatEvent {
    var model ChatEvent
    model.WSMessageMeta.MsgIdx = MsgIdxChatEvent
    model.ID = id
    model.Event = event
    model.TestSnakeCaseConvertor = testSnakeCaseConvertor
    return &model
}
type InitParams struct {
    Chat_id string
    Invisible string
}

func NewInitParams(v url.Values) *InitParams {
    ip := new(InitParams)
    ip.Chat_id = v.Get("chat_id")
    ip.Invisible = v.Get("invisible")
    return ip
}
func (ip *InitParams) Validate() error {
    //@todo dead code for client
    if len(ip.Chat_id) == 0 {
        return errors.New("missing parameter chat_id")
    }
    return nil
}
func (ip *InitParams) ToQuery() string {
    //@todo dead code for server
    v := url.Values{}
    v.Set("chat_id", ip.Chat_id)
    v.Set("invisible", ip.Invisible)
    return v.Encode()
}

