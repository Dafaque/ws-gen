// Code generated by wsgen. DO NOT EDIT.
package model
import (
	"errors"
	"net/url"
)

type msgIdx uint8
const (
    MsgIdxUndefined = iota
    MsgIdxTextMessage
    MsgIdxChatEvent
)

type WSMessageMeta struct {
    MsgIdx msgIdx `json:"$msg_idx"`
}


type TextMessage struct {
    WSMessageMeta
    ID int64 `json:"id"`
    Content *string `json:"content"`
    ArrayFieldExample []int64 `json:"array_field_example"`
    ArrayOptionalFieldExample []*float64 `json:"array_optional_field_example"`
}
func NewTextMessage(
    id int64,
    content *string,
    arrayFieldExample []int64,
    arrayOptionalFieldExample []*float64,
) *TextMessage {
    var model TextMessage
    model.WSMessageMeta.MsgIdx = MsgIdxTextMessage
    model.ID = id
    model.Content = content
    model.ArrayFieldExample = arrayFieldExample
    model.ArrayOptionalFieldExample = arrayOptionalFieldExample
    return &model
}

type ChatEvent struct {
    WSMessageMeta
    ID int64 `json:"id"`
    Event Event `json:"event"`
    TestSnakeCaseConvertor float64 `json:"test_snake_case_convertor"`
}
func NewChatEvent(
    id int64,
    event Event,
    testSnakeCaseConvertor float64,
) *ChatEvent {
    var model ChatEvent
    model.WSMessageMeta.MsgIdx = MsgIdxChatEvent
    model.ID = id
    model.Event = event
    model.TestSnakeCaseConvertor = testSnakeCaseConvertor
    return &model
}
type InitParams struct {
    ChatId string
    Invisible string
}

func NewInitParams(v url.Values) *InitParams {
    ip := new(InitParams)
    ip.ChatId = v.Get("chat_id")
    ip.Invisible = v.Get("invisible")
    return ip
}
func (ip *InitParams) Validate() error {
    //@todo dead code for client
    if len(ip.ChatId) == 0 {
        return errors.New("missing parameter chatId")
    }
    return nil
}
func (ip *InitParams) ToQuery() string {
    //@todo dead code for server
    v := url.Values{}
    v.Set("chat_id", ip.ChatId)
    v.Set("invisible", ip.Invisible)
    return v.Encode()
}

type Event uint8
const (
    EventUndefined Event = iota
    EventEntered
    EventLeaved
)
func (e Event) String() string {
    switch e {
        case EventEntered:
            return "entered"
        case EventLeaved:
            return "leaved"
    }
    return "undefined"
}
