// Code generated by wsgen. DO NOT EDIT.
import 'package:{{get_param "module"}}/{{get_param "package"}}/api/sender.dart';
import 'package:{{get_param "module"}}/{{get_param "package"}}/api/handler.dart';
import 'package:{{get_param "module"}}/{{get_param "package"}}/model/model.dart';
import 'package:{{get_param "module"}}/{{get_param "package"}}/serialization/coder.dart';

class Client extends MessageSender {
    final MessageHandler _handler;
    Function(Object err, StackTrace st)? onError;

    Client(
      this._handler,
      String addr,
      {{- if .Init.Params }}
      InitParams params,
      {{- end }}
      Coder coder,
    ): super(
      addr,
      {{- if .Init.Params }}
      params,
      {{- end }}
      coder
    ) {
        attachListener();
    }
    void attachListener() {
      chan.stream.listen(onMessage, onDone: onDisconnected, onError: onError);
      chan.ready.then((_) {
        _handler.onConnected(this);
      }, onError: onError).onError((e, st) {
        if (onError != null && e != null) onError!(e, st);
      });
    }

    void onDisconnected() =>
        _handler.onDisconnected(chan.closeCode, chan.closeReason);
  
  void onMessage(dynamic msg) {
    try {
      Encodable message = coder.decode(msg);
      {{- range $msg := .Messages}}
      {{- $name := sconv $msg.Name}}
      if (message is {{$name}}) return _handler.on{{$name}}(message, this);
      {{- end}}
    } catch (err, st) {
      if (onError != null) {
        onError!(err, st);
      }
    }
  }
}
