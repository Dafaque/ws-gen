// Code generated by wsgen. DO NOT EDIT.
import 'package:{{get_param "module"}}/{{get_param "package"}}/serialization/coder.dart';
enum MessageIndex {
    undefined,
{{- range $msg := .Messages}}
    {{$msg.Name}},
{{- end}}
}
{{- range $msg := .Messages}}
{{- $name := sconv $msg.Name}}
class {{$name}} implements Encodable {
    {{- range $field := $msg.Fields}}
    final {{tconv $field.Type}} {{fconv $field.Name}};
    {{- end}}
    {{$name}}(
        {{- range $field := $msg.Fields}}
        this.{{fconv $field.Name}},
        {{- end}}
    );
    @override
    Map<String, dynamic> toEncodable() => <String, dynamic>{
        "\$msg_idx": MessageIndex.{{$msg.Name}}.index,
        {{- range $field := $msg.Fields}}
        "{{snake $field.Name}}": {{fconv $field.Name}},
        {{- end}}
    };
}

{{$name}} {{$msg.Name}}FromMap(Map<String, dynamic> data) => {{$name}}(
    {{- range $field := $msg.Fields}}
    {{- if isenum $field.Type}}
    {{reftoname $field.Type}}.values[data["{{snake $field.Name}}"] as int],
    {{- else }} {{- if islist $field.Type }}
    (data["{{snake $field.Name}}"] as List).map((item) => item as {{listtypecast $field.Type}}).toList(),
    {{- else }}
    data["{{snake $field.Name}}"] as {{tconv $field.Type}},
    {{- end }}
    {{- end }}
    {{- end }}
);
{{end}}

{{- if .Init.Params }}
class InitParams {
    {{- range $param := .Init.Params }}
    final String {{fconv $param.Name}};
    {{- end }}
    InitParams(
        {{- range $param := .Init.Params}}
        this.{{fconv $param.Name}},
        {{- end}}
    );
    String toQuery() {
        List<String> components = [
            {{- range $param := .Init.Params}}
            "{{snake $param.Name}}=${{fconv $param.Name}}",
            {{- end}}
        ];
        return "?${components.join("&")}";
    }
}
{{- end }}

{{- if .Enums }}
mixin EnumEncodable<T extends Enum> on Enum implements Encodable {
  @override
  dynamic toEncodable() => index;
}
{{- end }}

{{- range $enum := .Enums}}
{{$typeName := sconv $enum.Name}}
enum {{sconv $enum.Name}} with EnumEncodable {
    undefined,
    {{- range $val := $enum.Values }}
    {{$val}},
    {{- end }}
}
{{- end }}
