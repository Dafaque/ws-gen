// Code generated by wsgen. DO NOT EDIT.
package mapper


import (
    "context"
	"errors"

    "{{get_param "module"}}/{{get_param "package"}}/model"
    "{{get_param "module"}}/{{get_param "package"}}/iface"
    "{{get_param "module"}}/{{get_param "package"}}/api"

    "github.com/gorilla/websocket" 
)

type Handler interface {
    GetConn() *websocket.Conn
    GetContext() context.Context
    GetHandler() api.MessageHandler
    GetCoder() iface.Coder
    GetLogger() iface.Logger
	CloseHandler(int, string) error
}

func Read(h Handler) error {
    _, data, errRead := h.GetConn().ReadMessage()
    if wsErr, casted := errRead.(*websocket.CloseError); casted {
		return h.CloseHandler(wsErr.Code, wsErr.Text)
	}
    if errRead != nil {
        h.GetLogger().Printf("Read(): %v", errRead)
        return errRead
    }
    var msgMeta model.WSMessageMeta
    if errUnmarshal := h.GetCoder().Unmarshal(data, &msgMeta); errUnmarshal != nil {
        h.GetLogger().Printf("Read(): %v", errUnmarshal)
        return errUnmarshal
    }
    switch msgMeta.MsgIdx {
    {{- range $msg := .Messages}}
    {{- $name := sconv $msg.Name}}
    case model.MsgIdx{{$name}}:
        var message model.{{$name}}
        if err := h.GetCoder().Unmarshal(data, &message); err != nil {
            h.GetLogger().Printf("Read(): %v", err)
            return err
        }
        errHandle := h.GetHandler().On{{$name}}(
            h.GetContext(),
            message,
            api.NewMessageSender(h.GetConn(), h.GetCoder()),
        )
        if errHandle != nil {
            h.GetLogger().Printf("Read()::On{{$name}}: %v", errHandle)
            return errHandle
        }
    {{- end}}
    default:
        err := errors.New("recieved malformed message") 
        h.GetLogger().Printf("Read()::default: %v", err)
        return err
    }
    return nil
    
}