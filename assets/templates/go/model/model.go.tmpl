// Code generated by wsgen. DO NOT EDIT.
package model

{{- if .Init.Params }}
import (
	"errors"
	"net/url"
)
{{- end}}

type msgIdx uint8
const (
    MsgIdxUndefined = iota
{{- range $msg := .Messages}}
    MsgIdx{{sconv $msg.Name}}
{{- end}}
)

type WSMessageMeta struct {
    MsgIdx msgIdx `{{.Encoding}}:"$msg_idx"`
}
{{- $encoding := .Encoding }}
{{range $msg := .Messages}}
{{$exportedModelName := sconv $msg.Name}}
type {{$exportedModelName}} struct {
    WSMessageMeta
    {{- range $field := $msg.Fields}}
    {{sconv $field.Name}} {{tconv $field.Type}} `{{$encoding}}:"{{snake $field.Name}}"`
    {{- end}}
}
func New{{$exportedModelName}}(
    {{- range $field := $msg.Fields}}
    {{$field.Name}} {{tconv $field.Type}},
    {{- end}}
) *{{$exportedModelName}} {
    var model {{$exportedModelName}}
    model.WSMessageMeta.MsgIdx = MsgIdx{{$exportedModelName}}
    {{- range $field := $msg.Fields}}
    model.{{fconv $field.Name}} = {{$field.Name}}
    {{- end}}
    return &model
}
{{- end}}

{{- if .Init.Params }}
type InitParams struct {
    {{- range $param := .Init.Params }}
    {{fconv $param.Name}} string
    {{- end }}
}

func NewInitParams(v url.Values) *InitParams {
    ip := new(InitParams)
    {{- range $param := .Init.Params }}
    ip.{{fconv $param.Name}} = v.Get("{{snake $param.Name}}")
    {{- end }}
    return ip
}
func (ip *InitParams) Validate() error {
    //@todo dead code for client
    {{- range $param := .Init.Params }}
    {{- if not $param.Optional}}
    if len(ip.{{fconv $param.Name}}) == 0 {
        return errors.New("missing parameter {{$param.Name}}")
    }
    {{- end}}
    {{- end }}
    return nil
}
func (ip *InitParams) ToQuery() string {
    //@todo dead code for server
    v := url.Values{}
    {{- range $param := .Init.Params }}
    v.Set("{{snake $param.Name}}", ip.{{fconv $param.Name}})
    {{- end }}
    return v.Encode()
}
{{- end}}

{{- range $enum := .Enums}}
{{$typeName := sconv $enum.Name}}
type {{$typeName}} uint8
const (
    {{$typeName}}Undefined {{$typeName}} = iota
    {{- range $val := $enum.Values }}
    {{$typeName}}{{sconv $val}}
    {{- end }}
)
func (e {{$typeName}}) String() string {
    switch e {
        {{- range $val := $enum.Values }}
        case {{$typeName}}{{sconv $val}}:
            return "{{$val}}"
        {{- end }}
    }
    return "undefined"
}
{{- end }}
