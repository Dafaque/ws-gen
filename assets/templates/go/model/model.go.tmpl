// Code generated by wsgen. DO NOT EDIT.
package model

{{- if .Init.Params }}
import (
	"errors"
	"net/url"
)
{{- end}}

type msgIdx uint8
const (
    MsgIdxUndefined = iota
{{- range $model := .Models}}
    MsgIdx{{sconv $model.Name}}
{{- end}}
)

type WSMessageMeta struct {
    MsgIdx msgIdx `json:"$msg_idx"`
}
{{range $model := .Models}}
{{$exportedModelName := sconv $model.Name}}
type {{$exportedModelName}} struct {
    WSMessageMeta
    {{- range $field := $model.Fields}}
    {{sconv $field.Name}} {{tconv $field.Type}} `json:"{{snake $field.Name}}"`
    {{- end}}
}
func New{{$exportedModelName}}(
    {{- range $field := $model.Fields}}
    {{$field.Name}} {{tconv $field.Type}},
    {{- end}}
) *{{$exportedModelName}} {
    var model {{$exportedModelName}}
    model.WSMessageMeta.MsgIdx = MsgIdx{{$exportedModelName}}
    {{- range $field := $model.Fields}}
    model.{{fconv $field.Name}} = {{$field.Name}}
    {{- end}}
    return &model
}
{{- end}}

{{- if .Init.Params }}
type InitParams struct {
    {{- range $param := .Init.Params }}
    {{fconv $param.Name}} string
    {{- end }}
}

func NewInitParams(v url.Values) *InitParams {
    ip := new(InitParams)
    {{- range $param := .Init.Params }}
    ip.{{fconv $param.Name}} = v.Get("{{snake $param.Name}}")
    {{- end }}
    return ip
}
func (ip *InitParams) Validate() error {
    //@todo dead code for client
    {{- range $param := .Init.Params }}
    {{- if not $param.Optional}}
    if len(ip.{{fconv $param.Name}}) == 0 {
        return errors.New("missing parameter {{$param.Name}}")
    }
    {{- end}}
    {{- end }}
    return nil
}
func (ip *InitParams) ToQuery() string {
    //@todo dead code for server
    v := url.Values{}
    {{- range $param := .Init.Params }}
    v.Set("{{$param.Name}}", ip.{{fconv $param.Name}})
    {{- end }}
    return v.Encode()
}
{{- end}}

