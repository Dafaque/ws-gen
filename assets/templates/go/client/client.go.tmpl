// Code generated by wsgen. DO NOT EDIT.
package client

import (
    "context"
    "{{get_param "module"}}/{{get_param "package"}}/iface"
    "{{get_param "module"}}/{{get_param "package"}}/mapper"
    "{{get_param "module"}}/{{get_param "package"}}/api"
    {{- if .Init.Params}}
    "{{get_param "module"}}/{{get_param "package"}}/model"
    {{- end}}

    "github.com/gorilla/websocket" 
)


func NewClient(
    url string,
    {{- if .Init.Params}}
    p *model.InitParams,
    {{- end}}
    mh api.MessageHandler,
    coder iface.Coder,
    logger iface.Logger,
) (*Client, error) {
    {{- if .Init.Params}}
    url += "?"
    url += p.ToQuery()
    {{- end}}
	conn, _, err := websocket.DefaultDialer.Dial(url, nil)
	if err != nil {
		return nil, err
	}
    cl := &Client{
		MessageSender: api.NewMessageSender(conn, coder),
		logger: logger,
		coder:  coder,
		conn:   conn,
        mh: mh,
	}
    go cl.rloop()
	return cl, nil
}

type Client struct {
    *api.MessageSender
    coder iface.Coder
    logger iface.Logger
    conn *websocket.Conn
    mh api.MessageHandler
    done bool
}

func (c *Client) Shutdown() {
	c.conn.Close()
}

func (c *Client) GetConn() *websocket.Conn {
    return c.conn
}
func (c *Client) GetContext() context.Context {
    return context.TODO()
}
func (c *Client) GetHandler() api.MessageHandler {
    return c.mh
}
func (c *Client) GetWriteChannel() chan interface{} {
    return nil //@todo
}
func (c *Client) GetCoder() iface.Coder {
    return c.coder
}
func (c *Client) GetLogger() iface.Logger {
    return c.logger
}
func (c *Client) CloseHandler(code int, reason string) error {
    c.done = true
    return nil
}

func (c *Client) rloop() {
    for {
        if c.done {
            break
        }
        mapper.Read(c)
    }
}
